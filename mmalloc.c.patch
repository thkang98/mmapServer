--- dlmalloc/malloc.c	2014-06-21 21:16:52.618470628 -0700
+++ mmalloc/malloc.c	2014-06-23 12:57:41.485271805 -0700
@@ -1,3 +1,5 @@
+#include "mymspace.h"
+
 /*
   This is a version (aka dlmalloc) of malloc/free/realloc written by
   Doug Lea and released to the public domain, as explained at
@@ -1641,7 +1643,39 @@
 #if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
 #define MAP_ANONYMOUS        MAP_ANON
 #endif /* MAP_ANON */
-#ifdef MAP_ANONYMOUS
+
+#ifdef MYSPACE_PROCESS_SHARED
+#define MMAP_FLAGS           (MAP_SHARED)
+static int dlmmap_fd = -1; /* Cached file descriptor for /dev/zero. */
+static size_t dlmmap_length = 0; 
+static void *dlmmap_head = 0; 
+
+static void * dlmmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset) {
+  void *shmem;
+  (void)fd; /* placate people compiling -Wunused */
+  (void)offset; /* placate people compiling -Wunused */
+  if (dlmmap_fd < 0) { 
+    if ((dlmmap_fd = open(MMAP_SHARED_NAME, O_CREAT|O_RDWR, 0666)) == -1) {
+      return NULL;
+    }    
+    if (lseek(dlmmap_fd, length - 1, 0) == -1) {
+      return NULL;
+    }    
+    if (write(dlmmap_fd, "", 1) != 1) { 
+      return NULL;
+    }    
+  }
+  shmem = mmap(addr, length, prot, flags, dlmmap_fd, 0);
+  if (!dlmmap_head) {
+    dlmmap_length = length;
+    dlmmap_head = shmem;
+  }
+  return shmem;
+}
+
+#define MMAP_DEFAULT(s) dlmmap(0, (s), MMAP_PROT, MMAP_FLAGS, dlmmap_fd, 0)
+
+#elif MAP_ANONYMOUS
 #define MMAP_FLAGS           (MAP_PRIVATE|MAP_ANONYMOUS)
 #define MMAP_DEFAULT(s)       mmap(0, (s), MMAP_PROT, MMAP_FLAGS, -1, 0)
 #else /* MAP_ANONYMOUS */
@@ -3520,6 +3554,16 @@
 #endif /* !NO_MALLINFO */
 
 #if !NO_MALLOC_STATS
+static unsigned long internal_malloc_stats_maxfp(mstate m) {
+  size_t maxfp = 0;
+  ensure_initialization();
+  if (!PREACTION(m)) {
+    check_malloc_state(m);
+    if (is_initialized(m)) { maxfp = m->max_footprint; }
+  }
+  return(maxfp);
+}
+
 static void internal_malloc_stats(mstate m) {
   ensure_initialization();
   if (!PREACTION(m)) {
@@ -5876,6 +5920,18 @@
 }
 
 #if !NO_MALLOC_STATS
+unsigned long mspace_malloc_stats_maxfp(mspace msp) {
+  unsigned long maxfp = 0;
+  mstate ms = (mstate)msp;
+  if (ok_magic(ms)) {
+    maxfp = internal_malloc_stats_maxfp(ms);
+  }
+  else {
+    USAGE_ERROR_ACTION(ms,ms);
+  }
+  return(maxfp);
+}
+
 void mspace_malloc_stats(mspace msp) {
   mstate ms = (mstate)msp;
   if (ok_magic(ms)) {
